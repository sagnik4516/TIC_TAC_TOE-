import pygame
import sys
import numpy as np


pygame.init()


# CONSTANTS

WIDTH = 600
HEIGHT = 600
LINEWID= 15
WINLINEWID= 15
BOARDROW= 3
BOARDCOL = 3
SQSIZE = 200
CIRCRAD = 60
CIRCWIDTH = 15
CROSSWID = 25
SPACE = 55


BGCOLOR = (28, 170, 156)
LNCOLOR = (23, 145, 135)
CIRCCOLOR = (239, 231, 200)
CROSSCOLOR = (66, 66, 66)


# SCREEN

screen = pygame.display.set_mode( (WIDTH, HEIGHT) )
pygame.display.set_caption( 'TIC TAC TOE' )
screen.fill( BGCOLOR )


# CONSOLE BOARD

board = np.zeros( (BOARDROW, BOARDCOL) )


# FUNCTIONS

def drawlines():
	# 1 horizontal
	pygame.draw.line( screen, LNCOLOR, (0, SQSIZE), (WIDTH, SQSIZE), LINEWID)
	# 2 horizontal
	pygame.draw.line( screen, LNCOLOR, (0, 2 * SQSIZE), (WIDTH, 2 * SQSIZE), LINEWID)

	# 1 vertical
	pygame.draw.line( screen, LNCOLOR, (SQSIZE, 0), (SQSIZE, HEIGHT), LINEWID)
	# 2 vertical
	pygame.draw.line( screen, LNCOLOR, (2 * SQSIZE, 0), (2 * SQSIZE, HEIGHT), LINEWID)

def drawfigures():
	for row in range(BOARDROW):
		for col in range(BOARDCOL):
			if board[row][col] == 1:
				pygame.draw.circle( screen, CIRCCOLOR, (int( col * SQSIZE + SQSIZE//2 ), int( row * SQSIZE + SQSIZE//2 )), CIRCRAD, CIRCWIDTH )
			elif board[row][col] == 2:
				pygame.draw.line( screen, CROSSCOLOR, (col * SQSIZE + SPACE, row * SQSIZE + SQSIZE - SPACE), (col * SQSIZE + SQSIZE - SPACE, row * SQSIZE + SPACE), CROSSWID )
				pygame.draw.line( screen, CROSSCOLOR, (col * SQSIZE + SPACE, row * SQSIZE + SPACE), (col * SQSIZE + SQSIZE - SPACE, row * SQSIZE + SQSIZE - SPACE), CROSSWID )

def marksquare(row, col, player):
	board[row][col] = player

def availablesquare(row, col):
	return board[row][col] == 0

def isboardfull():
	for row in range(BOARDROW):
		for col in range(BOARDCOL):
			if board[row][col] == 0:
				return False

	return True

def checkwin(player):
	# vertical win check
	for col in range(BOARDCOL):
		if board[0][col] == player and board[1][col] == player and board[2][col] == player:
			draw_vertical_winning_line(col, player)
			return True

	# horizontal win check
	for row in range(BOARDROW):
		if board[row][0] == player and board[row][1] == player and board[row][2] == player:
			draw_horizontal_winning_line(row, player)
			return True

	# asc diagonal win check
	if board[2][0] == player and board[1][1] == player and board[0][2] == player:
		draw_asc_diagonal(player)
		return True

	# desc diagonal win chek
	if board[0][0] == player and board[1][1] == player and board[2][2] == player:
		draw_desc_diagonal(player)
		return True

	return False

def draw_vertical_winning_line(col, player):
	posX = col * SQSIZE + SQSIZE//2

	if player == 1:
		color = CIRCCOLOR
	elif player == 2:
		color = CROSSCOLOR

	pygame.draw.line( screen, color, (posX, 15), (posX, HEIGHT - 15), LINEWID)

def draw_horizontal_winning_line(row, player):
	posY = row * SQSIZE + SQSIZE//2

	if player == 1:
		color = CIRCCOLOR
	elif player == 2:
		color = CROSSCOLOR

	pygame.draw.line( screen, color, (15, posY), (WIDTH - 15, posY), WINLINEWID)

def draw_asc_diagonal(player):
	if player == 1:
		color = CIRCCOLOR
	elif player == 2:
		color = CROSSCOLOR

	pygame.draw.line( screen, color, (15, HEIGHT - 15), (WIDTH - 15, 15), WINLINEWID)

def draw_desc_diagonal(player):
	if player == 1:
		color = CIRCCOLOR
	elif player == 2:
		color = CROSSCOLOR

	pygame.draw.line( screen, color, (15, 15), (WIDTH - 15, HEIGHT - 15), WINLINEWID)

def restart():
	screen.fill( BGCOLOR )
	drawlines()
	for row in range(BOARDROW):
		for col in range(BOARDCOL):
			board[row][col] = 0

drawlines()


# VARIABLES

player = 1
game_over = False


# MAINLOOP

while True:
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			sys.exit()

		if event.type == pygame.MOUSEBUTTONDOWN and not game_over:

			mouseX = event.pos[0] # x
			mouseY = event.pos[1] # y

			clicked_row = int(mouseY // SQSIZE)
			clicked_col = int(mouseX // SQSIZE)

			if availablesquare( clicked_row, clicked_col ):

				marksquare( clicked_row, clicked_col, player )
				if checkwin( player ):
					game_over = True
				player = player % 2 + 1

				drawfigures()

		if event.type == pygame.KEYDOWN:
			if event.key == pygame.K_r:
				restart()
				player = 1
				game_over = False

	pygame.display.update()
